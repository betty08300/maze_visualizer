Path Finding Visualizer

How is the maze generated?
A 20 x 20 grid of nodes is created. Nodes are first connected to all neighboring nodes through edges. This yields
an initial graph. To turn this graph into a proper maze, we must "remove" some edges to make the maze reasonably difficult.

To derive a maze from the graph, [Prim's Algorithm](link to wiki) is used to construct a random minimal spanning tree from the graph. 
A minimal spanning tree ensures that there is exactly one unique path between any two points in the graph. The start and end points are randomly
selected.



Four Path Finding Algorithms
- Depth-First Search
  - Implemented using a stack.
    A path is explored fully until a dead-end is reached, at which point a new path direction is chosen to explore.
- Breadth-First Search
  - Implemented using a queue.
    Paths in all directions take turns being incrementally explored.
- Bidirection Breadth-First Search
  - Implemented using two queues.
    A Breadth-First search is conducted from both the start and the end. The two explored regions are
    guaranteed to meet the middle, meaning a path has been found.
- Random Search
  - Unexplored edges are randomly chosen until the target is found. Because there is guaranteed to exist at least one
    path between two nodes in a spanning tree, the algorithm will eventually finish.